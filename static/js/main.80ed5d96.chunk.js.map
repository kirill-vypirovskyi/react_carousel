{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentIndex","maxIndex","props","images","length","frameSize","moveRight","step","infinite","nextStep","isEnouphPlace","setState","moveLeft","this","itemWidth","animationDuration","className","style","width","transition","transform","map","image","imageId","parseInt","slice","src","alt","type","onClick","disabled","Component","initialState","App","handleItemsWidth","value","handleFrameSize","handleStepSize","handleAnimationDuration","toggleInfinite","isChecked","htmlFor","id","defaultValue","min","max","onChange","event","target","checked","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80ed5d96.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  currentIndex: number;\n};\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    currentIndex: 0,\n  };\n\n  maxIndex = this.props.images.length - this.props.frameSize;\n\n  moveRight = () => {\n    const {\n      step,\n      infinite,\n    } = this.props;\n\n    const nextStep = this.state.currentIndex + step;\n    const isEnouphPlace = this.maxIndex >= (nextStep);\n\n    if (infinite && this.state.currentIndex === this.maxIndex) {\n      this.setState({ currentIndex: 0 });\n\n      return;\n    }\n\n    if (isEnouphPlace) {\n      this.setState({ currentIndex: nextStep });\n\n      return;\n    }\n\n    this.setState({ currentIndex: this.maxIndex });\n  };\n\n  moveLeft = () => {\n    const {\n      step,\n      infinite,\n    } = this.props;\n\n    const nextStep = this.state.currentIndex - step;\n    const isEnouphPlace = (nextStep) >= 0;\n\n    if (infinite && this.state.currentIndex === 0) {\n      this.setState({ currentIndex: this.maxIndex });\n\n      return;\n    }\n\n    if (isEnouphPlace) {\n      this.setState({ currentIndex: nextStep });\n\n      return;\n    }\n\n    this.setState({ currentIndex: 0 });\n  };\n\n  render() {\n    const {\n      itemWidth,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{\n          width: `${frameSize * itemWidth}px`,\n          transition: `${animationDuration}ms`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${-this.state.currentIndex * itemWidth}px)`,\n            transition: `transform ${animationDuration}ms`,\n          }}\n        >\n          {\n            this.props.images.map((image) => {\n              const imageId = parseInt(image.slice(6), 10);\n\n              return (\n                <li key={imageId}>\n                  <img\n                    src={image}\n                    alt={`${imageId}`}\n                    width={itemWidth}\n                  />\n                </li>\n              );\n            })\n          }\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            onClick={this.moveLeft}\n            disabled={this.state.currentIndex === 0 && !infinite}\n          >\n            Prev\n          </button>\n\n          <button\n            className=\"Carousel__button Carousel__button--next\"\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={this.moveRight}\n            disabled={this.state.currentIndex === this.maxIndex && !infinite}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  frameSize: number;\n  step: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst initialState = {\n  images: [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ],\n  frameSize: 3,\n  step: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n  infinite: false,\n};\n\nclass App extends React.Component<{}, State> {\n  state = initialState;\n\n  handleItemsWidth = (value: number) => {\n    if (value >= 100) {\n      this.setState({ itemWidth: value });\n    }\n  };\n\n  handleFrameSize = (value: number) => {\n    if (value >= 1) {\n      this.setState({ frameSize: value });\n    }\n  };\n\n  handleStepSize = (value: number) => {\n    if (value >= 1) {\n      this.setState({ step: value });\n    }\n  };\n\n  handleAnimationDuration = (value: number) => {\n    if (value >= 0) {\n      this.setState({ animationDuration: value });\n    }\n  };\n\n  toggleInfinite = (isChecked: boolean) => {\n    this.setState({ infinite: isChecked });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy='title'>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <div className=\"settings\">\n          <label htmlFor=\"itemId\">\n            <p>Items width: </p>\n\n            <input\n              className=\"settings__input\"\n              id=\"itemId\"\n              type=\"number\"\n              defaultValue={itemWidth}\n              min=\"100\"\n              max=\"300\"\n              onChange={(event) => {\n                this.handleItemsWidth(+event.target.value);\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"frameId\">\n            <p>Amount of images in frame: </p>\n\n            <input\n              className=\"settings__input\"\n              id=\"frameId\"\n              type=\"number\"\n              min=\"1\"\n              max=\"5\"\n              defaultValue={frameSize}\n              onChange={(event) => {\n                this.handleFrameSize(+event.target.value);\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"stepId\">\n            <p>Step size: </p>\n\n            <input\n              className=\"settings__input\"\n              id=\"stepId\"\n              type=\"number\"\n              min={1}\n              max={5}\n              defaultValue={step}\n              onChange={(event) => {\n                this.handleStepSize(+event.target.value);\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"animationId\">\n            <p>Set animation duration in ms: </p>\n\n            <input\n              className=\"settings__input\"\n              id=\"animationId\"\n              type=\"number\"\n              step=\"100\"\n              min={0}\n              defaultValue={animationDuration}\n              onChange={(event) => {\n                this.handleAnimationDuration(+event.target.value);\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"infiniteId\">\n            <p>Infinite: </p>\n\n            <input\n              className=\"settings__checkbox\"\n              id=\"infiniteId\"\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={(event) => this.toggleInfinite(event.target.checked)}\n            />\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}