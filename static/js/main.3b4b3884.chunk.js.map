{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentPos","images","props","imagesAmount","length","moveRight","step","itemWidth","frameSize","infinite","max","stepWidth","setState","prevState","moveLeft","this","animationDuration","className","style","width","transform","transition","map","image","imageId","parseInt","slice","src","alt","type","onClick","Component","App","toggleInfinite","htmlFor","id","defaultValue","onChange","event","Number","target","value","min","defaultChecked","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b4b3884.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  currentPos: number;\n};\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    currentPos: 0,\n  };\n\n  images = this.props.images;\n\n  imagesAmount = this.images.length;\n\n  moveRight = () => {\n    const {\n      step,\n      itemWidth,\n      frameSize,\n      infinite,\n    } = this.props;\n    const max = -(itemWidth * (this.imagesAmount - frameSize));\n    const stepWidth = step * itemWidth;\n    const isEnouphPlace = max < this.state.currentPos - stepWidth;\n\n    if (isEnouphPlace) {\n      this.setState(prevState => (\n        { currentPos: prevState.currentPos - stepWidth }\n      ));\n    } else {\n      this.setState({ currentPos: max });\n    }\n\n    if (infinite && this.state.currentPos === max) {\n      this.setState({ currentPos: 0 });\n    }\n  };\n\n  moveLeft = () => {\n    const {\n      step,\n      itemWidth,\n      frameSize,\n      infinite,\n    } = this.props;\n    const max = -(itemWidth * (this.imagesAmount - frameSize));\n    const stepWidth = step * itemWidth;\n    const isEnouphPlace = this.state.currentPos + stepWidth <= 0;\n\n    if (isEnouphPlace) {\n      this.setState(prevState => (\n        { currentPos: prevState.currentPos + stepWidth }\n      ));\n    } else {\n      this.setState({ currentPos: 0 });\n    }\n\n    if (infinite && this.state.currentPos === 0) {\n      this.setState({ currentPos: max });\n    }\n  };\n\n  render() {\n    const {\n      itemWidth,\n      frameSize,\n      animationDuration,\n    } = this.props;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{\n          width: `${frameSize * itemWidth}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${this.state.currentPos}px)`,\n            transition: `transform ${animationDuration}ms`,\n          }}\n        >\n          {\n            this.props.images.map((image) => {\n              const imageId = parseInt(image.slice(6), 10);\n\n              return (\n                <li\n                  key={imageId}\n                >\n                  <img\n                    src={image}\n                    alt={`${imageId}`}\n                    style={{\n                      width: `${itemWidth}px`,\n                    }}\n                  />\n                </li>\n              );\n            })\n          }\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            onClick={this.moveLeft}\n          >\n            Prev\n          </button>\n\n          <button\n            className=\"Carousel__button Carousel__button--next\"\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={this.moveRight}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  frameSize: number;\n  step: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    frameSize: 3,\n    step: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  toggleInfinite = () => {\n    this.setState((prevState) => ({ infinite: !prevState.infinite }));\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy='title'>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n        <label htmlFor=\"itemId\">\n          {'Items width: '}\n          <input\n            id=\"itemId\"\n            type=\"number\"\n            defaultValue={itemWidth}\n            onChange={(event) => {\n              this.setState({ itemWidth: Number(event.target.value) });\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\">\n          {'Amount of images in frame: '}\n          <input\n            id=\"frameId\"\n            type=\"number\"\n            min={1}\n            max={5}\n            defaultValue={frameSize}\n            onChange={(event) => {\n              this.setState({ frameSize: Number(event.target.value) });\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\">\n          {'Step size: '}\n          <input\n            id=\"stepId\"\n            type=\"number\"\n            min={1}\n            max={5}\n            defaultValue={step}\n            onChange={(event) => {\n              this.setState({ step: Number(event.target.value) });\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"animationId\">\n          {'Set animation duration in ms: '}\n          <input\n            id=\"animationId\"\n            type=\"number\"\n            step=\"100\"\n            defaultValue={animationDuration}\n            onChange={(event) => {\n              this.setState({ animationDuration: Number(event.target.value) });\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"infiniteId\">\n          {'Infinite: '}\n          <input\n            id=\"infiniteId\"\n            type=\"checkbox\"\n            defaultChecked={infinite}\n            onChange={this.toggleInfinite}\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}